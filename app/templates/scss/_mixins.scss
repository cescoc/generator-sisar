//* = Custom checkboxes / radio buttons
//----------------------------------------------- */

@mixin custom-check($type, $where, $bg:null){
  input[type="#{$type}"]{
    @at-root .foo:checked, & + label{
      @if $bg != null{
        line-height:image-height($bg);
      }
    }

    @at-root .foo:checked, & + label::#{$where}{
      @if $bg != null{
        width: image-width($bg) / 2;
        height: image-height($bg);
        background:url($bg) left no-repeat;
      }

      @if $where == 'after' {
        margin-left:0.5em;
      }
      @if $where == 'before' {
        margin-right:0.5em;
      }
    }

    &:checked + label::#{$where}{
      background-position:right;
    }

  }

  @extend %custom-check-#{$type};

}

@mixin custom-check-checked($type, $where){
  @at-root .foo:checked, & input[type="#{$type}"] + label::#{$where}{ @content }
}

@mixin custom-check-unchecked($type, $where){
  @at-root .foo:checked, & input[type="#{$type}"] + label::#{$where}{ @content }
}



@at-root .foo:checked::before,%custom-check{
  position:absolute;
  clip: rect(0,0,0,0);
  clip: rect(0 0 0 0);
}

%custom-check-radio{
  & input[type="radio"]{
    @extend %custom-check
  }

  @at-root .foo:checked,
  & input[type="radio"]{
    & + label{
      position:relative;
      cursor:pointer;

      &::before, &::after{
        display:inline-block;
        top:0;
        vertical-align:top;
      }
    }
  }
}

%custom-check-checkbox{
  & input[type="checkbox"]{
    @extend %custom-check
  }

  @at-root .foo:checked,
  & input[type="checkbox"]{
    & + label{
      position:relative;
      cursor:pointer;

      &::before, &::after{
        display:inline-block;
        top:0;
        vertical-align:top;
      }
    }
  }
}


//* = CSS tiangle
//----------------------------------------------- */


@mixin triangle ($size, $color, $direction) {
  height: 0;
  width: 0;

  @if ($direction == up) or ($direction == down) or ($direction == right) or ($direction == left) {
    border-color: transparent;
    border-style: solid;
    border-width: $size / 2;

    @if $direction == up {
      border-bottom-color: $color;

    } @else if $direction == right {
      border-left-color:   $color;

    } @else if $direction == down {
      border-top-color:    $color;

    } @else if $direction == left {
      border-right-color:  $color;
    }
  }

  @else if ($direction == up-right) or ($direction == up-left) {
    border-top: $size solid $color;

    @if $direction == up-right {
      border-left:  $size solid transparent;

    } @else if $direction == up-left {
      border-right: $size solid transparent;
    }
  }

  @else if ($direction == down-right) or ($direction == down-left) {
    border-bottom: $size solid $color;

    @if $direction == down-right {
      border-left:  $size solid transparent;

    } @else if $direction == down-left {
      border-right: $size solid transparent;
    }
  }
}
<% if (!includeBootstrap) { %>
@mixin clearfix() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

@mixin img-responsive($display: block) {
  display: $display;
  max-width: 100%;
  height: auto;
}
<% } %>
//* = smooth transitions
//----------------------------------------------- */
@mixin smooth{
  -webkit-transform-style: preserve-3d;
  -webkit-backface-visibility: hidden;
}

//* = Extends
//----------------------------------------------- */

%inline-block{
	@include inline-block;
}
<% if (includeBootstrap) { %>
%container{
	@include container-fixed;
	position:relative;
	@media (min-width: $screen-tablet) { max-width: $container-tablet; }
	@media (min-width: $screen-desktop) { max-width: $container-desktop; }
	@media (min-width: $screen-lg) { max-width: $container-lg; }
}

%row{
  @include make-row;
}
<% } %>
//* = Breakpoints
//----------------------------------------------- */

@mixin breakpoint($point) {
  @if $point == lg {
    @media screen and (min-width: $screen-lg) { @content; }
  }
  @else if $point == md {
    // @media screen and( min-width: $screen-md ) and (max-width: $screen-md-max) { @content; } // DEPRECATED
    @media screen and( min-width: $screen-md ) { @content; } // Mobile First
  }
  @else if $point == sm {
    // @media screen and (max-width: $screen-sm-max) { @content; } // DEPRECATED
    @media screen and (min-width: $screen-sm) { @content; } // Mobile First
  }
  @else if $point == xs {
    // @media screen and (max-width: $screen-xs-max) { @content; } // DEPRECATED
    @media screen and (min-width: $screen-xs) { @content; } // Mobile First
  }
  @else if $point == phone {
    @media screen and (max-width: $screen-xs) { @content; }
  }
}


